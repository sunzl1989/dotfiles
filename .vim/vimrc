set nocompatible

" Bundles
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Bundle 'gmarik/Vundle.vim'
Bundle 'scrooloose/nerdtree'
Bundle 'jistr/vim-nerdtree-tabs'
Bundle 'kien/ctrlp.vim'
Bundle 'bling/vim-airline.git'
Bundle 'mileszs/ack.vim'
Bundle 'tpope/vim-haml'
Bundle 'DAddYE/vim-slim'
Bundle 'Raimondi/delimitMate'
Bundle 'pangloss/vim-javascript'
Bundle 'tpope/vim-commentary'
Bundle 'kchmck/vim-coffee-script'
Bundle 'wavded/vim-stylus'
Bundle 'scrooloose/syntastic'
Bundle 'tpope/vim-fugitive'
Bundle 'godlygeek/tabular'
Bundle 'tpope/vim-surround'
Bundle 'groenewege/vim-less'
Bundle 'sunaku/vim-ruby-minitest'
Bundle 'blueyed/ZoomWin'
Bundle 'digitaltoad/vim-jade'
Bundle 'sjl/vitality.vim'
Bundle 'kristijanhusak/vim-multiple-cursors'
Bundle 'othree/html5.vim'
Bundle 'hail2u/vim-css3-syntax'
Bundle 'evanmiller/nginx-vim-syntax'
Bundle 'tpope/vim-rails'
Bundle 'derekwyatt/vim-scala'
Bundle 'plasticboy/vim-markdown'
Bundle 'guns/vim-clojure-static'
Bundle 'guns/vim-clojure-highlight'
Bundle 'vim-ruby/vim-ruby'
Bundle 'uarun/vim-protobuf'
Bundle 'chriskempson/base16-vim'
Bundle 'fatih/vim-go'
Bundle 'killphi/vim-ebnf'
Bundle 'nddrylliog/ooc.vim'
Bundle 'gf3/peg.vim'
Bundle 'leafgarland/typescript-vim'
Bundle 'toyamarinyon/vim-swift'
Bundle 'majutsushi/tagbar'
Bundle 'eagletmt/neco-ghc'
Bundle 'eagletmt/ghcmod-vim'
Bundle 'wting/rust.vim'
Bundle 'cespare/vim-toml'
Bundle 'mxw/vim-jsx'
Bundle 'elubow/cql-vim'
Bundle 'klen/python-mode'
Bundle 'Valloric/YouCompleteMe'
Bundle 'SirVer/ultisnips'
Bundle 'honza/vim-snippets'
Bundle 'jordwalke/flatlandia'
Bundle 'terryma/vim-expand-region'
Bundle 'tpope/vim-sleuth'
Bundle 'solarnz/thrift.vim'
Bundle 'morhetz/gruvbox'

call vundle#end()
filetype plugin indent on

syntax on
set spell
set number
set numberwidth=5

set autoindent
set nocursorcolumn
set nocursorline
set encoding=utf-8
set title
set shortmess=atI " don't sho intro messages
set report=0      " tell us about changes
set backspace=indent,eol,start " allow backspacing over everything in insert mode

set tabstop=4
set shiftwidth=4
set softtabstop=4
set noexpandtab
set textwidth=100

set ruler
set nowrap
set list
set listchars=tab:\ ·,trail:·
set lazyredraw
set matchtime=3
set showbreak=↪
set splitbelow
set splitright
set fillchars=vert:\ " empty is nicer on our term
set autowrite
set shiftround
set autoread
set linebreak
set hlsearch
set incsearch
set ignorecase
set smartcase
set laststatus=2
set completeopt=longest,menuone
set omnifunc=syntaxcomplete#Complete

set clipboard+=unnamed " Share your clipboard with system
set mouse=a            " Make mouse working!
set modeline
set modelines=10
set shell=/bin/sh

set wildmode=list:longest,list:full  " Tab completion
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.class,.svn,*.gem
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*,*/nimcache/*
set wildignore+=*.swp,*~,._*

set showcmd " Show (partial) command in the status line"
set showmode

set history=1000                      " Store lots of :cmdline history
set backupdir=~/.vim/tmp/backup/      " where to put backup files.
set directory=~/.vim/tmp/swap/        " where to put swap files.
set backupskip=/tmp/*,/private/tmp/*  " make Vim able to edit crontab files again.
set nobackup                            " enable backups
set noswapfile                        " It's 2012, Vim.

" Avoid formatting bullets
set fo+=tcqlnr
" set fo-=r
" set fo-=o
set flp=^\\s*\\d\\+\\.\\s\\+\\\|^[-*+]\\s\\+

if exists("&undodir")
  set undodir=~/.vim/undo/
  set undofile
endif

set nostartofline " Don’t reset cursor to start of line when moving around.
set esckeys " Allow cursor keys in insert mode
set ttyfast " Optimize for fast terminal connections
set isk+=_,$,@,%,#,- " none word dividers

if exists("&cryptmethod")
  set cryptmethod=blowfish " https://coderwall.com/p/hypjbg
endif

" Time out on key codes but not mappings.
" Basically this makes terminal Vim work sanely.
set notimeout
set ttimeout
set ttimeoutlen=10

" Write better
if exists("&cc")
  set cc=100
endif

" In case we use molokay
let g:rehash256 = 1

set background=dark
colorscheme gruvbox " base16-eighties " molokai

" Disable markdown floading
let g:vim_markdown_folding_disabled=1

" Change mapleader
let mapleader="\<Space>"

" Verical bar in insert mode (for iTerm users only)
if has("nvim")
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
    let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Save when losing focus
au FocusLost * :silent! wall

" When we open a new session let's change the path
au VimEnter * cd %:p:h

" Resize splits when the window is resized
au VimResized * :wincmd =

" Set current chdir
au VimEnter * silent! cd %:p:h

" Smart indent
let delimitMate_expand_cr = 1
let delimitMate_expand_space = 1

" Set the snippets for golang
let g:go_snippet_engine = "ultisnips"
let g:go_fmt_command = "goimports"

" Play nice with YCM
" let g:UltiSnipsJumpForwardTrigger="<tab>"
" let g:UltiSnipsListSnippets="<c-e>"

" Use AG
let g:ackprg = 'ag --nogroup --nocolor --column'

au FileType *    set expandtab   " others not
au FileType make set noexpandtab " make uses real tabs"

" Thorfile, Rakefile, GuardFile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Guardfile,Vagrantfile,Thorfile,Do,dorc,Dofile,config.ru} set ft=ruby

" Auto source when we change vimrc
" au BufWritePost {vimrc,.vimrc,.gvimrc,.nvim,.nvimrc} source %

" Add json syntax highlighting
au BufNewFile,BufRead *.json set ft=javascript

" Special settings for common languages
au Filetype * set noexpandtab
au FileType python set softtabstop=4 tabstop=4 shiftwidth=4 textwidth=100 expandtab
au FileType {ruby,yaml} set softtabstop=2 tabstop=2 shiftwidth=2 textwidth=100 expandtab

" Iced coffee
autocmd BufNewFile,BufRead *.iced set filetype=coffee
syn match coffeeKeyword /\<\%(await\|defer\)\>/ display

" Git commits
au Filetype gitcommit setlocal spell textwidth=72
au BufRead,BufNewFile GHI_* set ft=gitcommit

" Nginx highlight
au BufRead,BufNewFile /{etc,opt}/nginx/conf/* set ft=nginx

" remember last location in file, but not for commit messages.
au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
      \| exe "normal! g`\"" | endif

au BufRead,BufNewFile *.wisp set ft=clojure

" Make sh a bit happier
let g:is_bash=1

" Vitality
let g:always_assume_iterm = 0

" Enable syntastic syntax checking
let g:syntastic_enable_signs   = 1

" Turn off jslint errors by default
let g:JSLintHighlightErrorLine = 0

" Stop fucking netrw
let g:netrw_silent = 1
let g:netrw_quiet  = 1
let g:loaded_netrw = 1

" NERDTree configuration
let NERDTreeQuitOnOpen  = 0   " don't collapse NERDTree when a file is opened
let NERDTreeMinimalUI   = 1
let NERDTreeDirArrows   = 0
let NERDTreeChDirMode   = 0
let NERDTreeIgnore      = ['\.pyc$', '\.rbc$', '\~$', '\.iml']
let NERDTreeHijackNetrw = 0
let g:nerdtree_tabs_startup_cd = 0
let g:nerdtree_tabs_open_on_gui_startup = 0


" Add a more detailed theme for airline
let g:airline_theme = 'ubaryd'

" Rust
" let g:racer_cmd = "/usr/src/rust/racer/bin/racer"
" let $RUST_SRC_PATH="/usr/src/rust/rust-lang"

" Golang
let g:go_highlight_operators=1
let g:go_highlight_functions=1
let g:go_highlight_methods=1
let g:go_highlight_structs=1

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" Select with enter
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-tab>"
let g:UltiSnipsExpandTrigger="<nop>"
let g:ulti_expand_or_jump_res = 0
function! <SID>ExpandSnippetOrReturn()
  let snippet = UltiSnips#ExpandSnippetOrJump()
  if g:ulti_expand_or_jump_res > 0
    return snippet
  else
    return "\<C-Y>"
  endif
endfunction
imap <expr> <CR> pumvisible() ? "<C-R>=<SID>ExpandSnippetOrReturn()<CR>" : "<Plug>delimitMateCR"
" imap <expr> <CR> pumvisible() ? "\<c-y>" : "<Plug>delimitMateCR"

" Shortcuts
imap <C-w> <Esc><C-w> " move through windows in insert mode
imap <C-v> <Esc><C-v> " allow block selection in insert mode

" Keep visual mode during indenting
vmap > >gv
vmap < <gv

" Tab movements & creation
map <C-S-Left> gT
map <C-S-Right> gt
imap <C-S-Left> <Esc>gT
imap <C-S-Right> <Esc>gt

" Python
let g:pymode_rope_goto_definition_bind = '<Leader>gt'
let g:pymode_folding = 0
let g:pymode_options_max_line_length = 100
let g:pymode_lint_checkers = ['pyflakes', 'pep8']
let g:pymode_rope_show_doc_bind = '<Leader>gd'
let g:pymode_rope_autoimport_import_after_complete = 1
let g:pymode_rope_organize_imports_bind = '<Leader>is'

" Go
au FileType go nmap <Leader>gt <Plug>(go-def)

" Terminal
if has('nvim')
  let g:terminal_color_256=1
  tnoremap <Leader>e <C-\><C-n>
  tnoremap <C-S-Left> <C-\><C-n>gT
  tnoremap <C-S-Right> <C-\><C-n>gt
  tnoremap <C-w>h <C-\><C-n><C-w>h
  tnoremap <C-w>j <C-\><C-n><C-w>j
  tnoremap <C-w>k <C-\><C-n><C-w>k
  tnoremap <C-w>l <C-\><C-n><C-w>l
endif
" nnoremap <C-S-Left> <C-w>h
" nnoremap <C-S-Down> <C-w>j
" nnoremap <C-S-Up> <C-w>k
" nnoremap <C-S-Right> <C-w>l

" Some personal shortcuts
nmap <leader>zz :ZoomWin<CR>
nmap <leader>gs :Gstatus<CR>
nmap <leader>gd :Gdiff<CR>
nmap <leader>gp :Git push<CR>
nmap <leader>gc :Git c<CR>
nmap <leader>rr :redraw! \| :NERDTree<CR>
nmap <leader>cc :nohlsearch<CR>
nmap <leader>tt :NERDTreeTabsToggle<CR>
nmap <leader>ff :NERDTreeTabsFind<CR>
nmap <leader>tb :TagbarToggle<CR>
nmap <leader>ff ggVG=         " format the entire file
nmap <leader>i :set list!<CR> " toggle [i]nvisible characters
nmap <Leader>o :CtrlP<CR>
nmap <Leader>w :w<CR>
nmap <Leader>q :q<CR>
vmap p "_dP

" CtrlP
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_by_filename = 0

" if executable('fzf')
"   let g:ctrlp_use_caching = 0
"   let g:ctrlp_user_command = 'cd %s && find . -not \( -name .git -type d -prune \) -type f'
"   let g:ctrlp_match_func = { 'match': 'ZFZMatch' }

"   function! ZFZMatch(items, str, limit, mmode, ispath, crfile, regex)
"     let cmd = 'fzf -f \"'.a:str.'\"'
"     return split(system(cmd), "\n")
"   endfunction
" endif

let g:jsx_pragma_required = 0

" Clang format
let g:clang_format#auto_format = 1
let g:clang_format#style_options = {
    \ 'BasedOnStyle': 'llvm',
    \ 'ColumnLimit': 100,
    \ 'BreakBeforeBraces' : 'Stroustrup',
    \ }
    " \ 'AlwaysBreakAfterDefinitionReturnType': 'true',

" Additional mapping for buffer search
map  <C-k> :CtrlPBuffer<CR>
imap <C-k> <ESC>:CtrlPBuffer<CR>

map  <C-b> :CtrlPBufTag<CR>
imap <C-b> <ESC>:CtrlPBufTag<CR>

" Use :W! to write to a file using sudo if you forgot to 'sudo vim file'
ca W! %!sudo tee > /dev/null %
